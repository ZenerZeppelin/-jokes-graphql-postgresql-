type User {
  id: ID! @id
  email: String! @unique
  password: String!
  username: String! @unique
  role: UserRole
  age: Int
  jokes:[Joke!]! @relation(name:"UserToJoke" onDelete: CASCADE)
  comments: [Comment]! @relation(name:"UserToComment" onDelete: CASCADE)
  reviews:[Review!]! @relation(name:"UserToReview" onDelete: CASCADE)
}

type Joke {
  id: ID! @id 
  author: User! @relation(name:"UserToJoke" onDelete: SET_NULL)
  title: String!
  text: String!
  numberOfRatings: Int!
  sumOfRatings: Int!
  avgRating: Float!
  comments: [Comment!]! @relation(name:"JokeToComment" onDelete: CASCADE)
  reviews: [Review!]! @relation(name:"JokeToReview" onDelete: CASCADE)
}

type Comment {
  id:ID! @id
  text: String!
  author: User! @relation(name:"UserToComment" onDelete: SET_NULL)
  joke: Joke! @relation(name:"JokeToComment" onDelete: SET_NULL) 
}

type Review {
  id: ID! @id
  author: User! @relation(name:"UserToReview" onDelete:SET_NULL)
  joke: Joke! @relation(name:"JokeToReview" onDelete: SET_NULL)
  rate: Int!
  text: String!
}

enum UserRole {
  JOKER
  REVIEWER
}