# source: http://localhost:4466
# timestamp: Fri Apr 17 2020 13:39:45 GMT+0200 (Central European Summer Time)

type AggregateComment {
  count: Int!
}

type AggregateJoke {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Comment implements Node {
  id: ID!
  text: String!
  author: User!
  joke: Joke!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
  joke: JokeCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutJokeInput {
  create: [CommentCreateWithoutJokeInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  id: ID
  text: String!
  joke: JokeCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutJokeInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
}

input CommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  joke: JokeUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutJokeInput {
  create: [CommentCreateWithoutJokeInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutJokeInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutJokeInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
  text: String
  joke: JokeUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutJokeDataInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutJokeInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutJokeDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutJokeInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutJokeDataInput!
  create: CommentCreateWithoutJokeInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  author: UserWhereInput
  joke: JokeWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

type Joke implements Node {
  id: ID!
  author: User!
  title: String!
  text: String!
  numberOfRatings: Int!
  sumOfRatings: Int!
  avgRating: Float!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
}

"""A connection to a list of items."""
type JokeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [JokeEdge]!
  aggregate: AggregateJoke!
}

input JokeCreateInput {
  id: ID
  title: String!
  text: String!
  numberOfRatings: Int!
  sumOfRatings: Int!
  avgRating: Float!
  author: UserCreateOneWithoutJokesInput!
  comments: CommentCreateManyWithoutJokeInput
  reviews: ReviewCreateManyWithoutJokeInput
}

input JokeCreateManyWithoutAuthorInput {
  create: [JokeCreateWithoutAuthorInput!]
  connect: [JokeWhereUniqueInput!]
}

input JokeCreateOneWithoutCommentsInput {
  create: JokeCreateWithoutCommentsInput
  connect: JokeWhereUniqueInput
}

input JokeCreateOneWithoutReviewsInput {
  create: JokeCreateWithoutReviewsInput
  connect: JokeWhereUniqueInput
}

input JokeCreateWithoutAuthorInput {
  id: ID
  title: String!
  text: String!
  numberOfRatings: Int!
  sumOfRatings: Int!
  avgRating: Float!
  comments: CommentCreateManyWithoutJokeInput
  reviews: ReviewCreateManyWithoutJokeInput
}

input JokeCreateWithoutCommentsInput {
  id: ID
  title: String!
  text: String!
  numberOfRatings: Int!
  sumOfRatings: Int!
  avgRating: Float!
  author: UserCreateOneWithoutJokesInput!
  reviews: ReviewCreateManyWithoutJokeInput
}

input JokeCreateWithoutReviewsInput {
  id: ID
  title: String!
  text: String!
  numberOfRatings: Int!
  sumOfRatings: Int!
  avgRating: Float!
  author: UserCreateOneWithoutJokesInput!
  comments: CommentCreateManyWithoutJokeInput
}

"""An edge in a connection."""
type JokeEdge {
  """The item at the end of the edge."""
  node: Joke!

  """A cursor for use in pagination."""
  cursor: String!
}

enum JokeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  numberOfRatings_ASC
  numberOfRatings_DESC
  sumOfRatings_ASC
  sumOfRatings_DESC
  avgRating_ASC
  avgRating_DESC
}

type JokePreviousValues {
  id: ID!
  title: String!
  text: String!
  numberOfRatings: Int!
  sumOfRatings: Int!
  avgRating: Float!
}

input JokeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [JokeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [JokeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [JokeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  numberOfRatings: Int

  """All values that are not equal to given value."""
  numberOfRatings_not: Int

  """All values that are contained in given list."""
  numberOfRatings_in: [Int!]

  """All values that are not contained in given list."""
  numberOfRatings_not_in: [Int!]

  """All values less than the given value."""
  numberOfRatings_lt: Int

  """All values less than or equal the given value."""
  numberOfRatings_lte: Int

  """All values greater than the given value."""
  numberOfRatings_gt: Int

  """All values greater than or equal the given value."""
  numberOfRatings_gte: Int
  sumOfRatings: Int

  """All values that are not equal to given value."""
  sumOfRatings_not: Int

  """All values that are contained in given list."""
  sumOfRatings_in: [Int!]

  """All values that are not contained in given list."""
  sumOfRatings_not_in: [Int!]

  """All values less than the given value."""
  sumOfRatings_lt: Int

  """All values less than or equal the given value."""
  sumOfRatings_lte: Int

  """All values greater than the given value."""
  sumOfRatings_gt: Int

  """All values greater than or equal the given value."""
  sumOfRatings_gte: Int
  avgRating: Float

  """All values that are not equal to given value."""
  avgRating_not: Float

  """All values that are contained in given list."""
  avgRating_in: [Float!]

  """All values that are not contained in given list."""
  avgRating_not_in: [Float!]

  """All values less than the given value."""
  avgRating_lt: Float

  """All values less than or equal the given value."""
  avgRating_lte: Float

  """All values greater than the given value."""
  avgRating_gt: Float

  """All values greater than or equal the given value."""
  avgRating_gte: Float
}

type JokeSubscriptionPayload {
  mutation: MutationType!
  node: Joke
  updatedFields: [String!]
  previousValues: JokePreviousValues
}

input JokeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [JokeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [JokeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [JokeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: JokeWhereInput
}

input JokeUpdateInput {
  title: String
  text: String
  numberOfRatings: Int
  sumOfRatings: Int
  avgRating: Float
  author: UserUpdateOneRequiredWithoutJokesInput
  comments: CommentUpdateManyWithoutJokeInput
  reviews: ReviewUpdateManyWithoutJokeInput
}

input JokeUpdateManyDataInput {
  title: String
  text: String
  numberOfRatings: Int
  sumOfRatings: Int
  avgRating: Float
}

input JokeUpdateManyMutationInput {
  title: String
  text: String
  numberOfRatings: Int
  sumOfRatings: Int
  avgRating: Float
}

input JokeUpdateManyWithoutAuthorInput {
  create: [JokeCreateWithoutAuthorInput!]
  connect: [JokeWhereUniqueInput!]
  set: [JokeWhereUniqueInput!]
  disconnect: [JokeWhereUniqueInput!]
  delete: [JokeWhereUniqueInput!]
  update: [JokeUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [JokeUpdateManyWithWhereNestedInput!]
  deleteMany: [JokeScalarWhereInput!]
  upsert: [JokeUpsertWithWhereUniqueWithoutAuthorInput!]
}

input JokeUpdateManyWithWhereNestedInput {
  where: JokeScalarWhereInput!
  data: JokeUpdateManyDataInput!
}

input JokeUpdateOneRequiredWithoutCommentsInput {
  create: JokeCreateWithoutCommentsInput
  connect: JokeWhereUniqueInput
  update: JokeUpdateWithoutCommentsDataInput
  upsert: JokeUpsertWithoutCommentsInput
}

input JokeUpdateOneRequiredWithoutReviewsInput {
  create: JokeCreateWithoutReviewsInput
  connect: JokeWhereUniqueInput
  update: JokeUpdateWithoutReviewsDataInput
  upsert: JokeUpsertWithoutReviewsInput
}

input JokeUpdateWithoutAuthorDataInput {
  title: String
  text: String
  numberOfRatings: Int
  sumOfRatings: Int
  avgRating: Float
  comments: CommentUpdateManyWithoutJokeInput
  reviews: ReviewUpdateManyWithoutJokeInput
}

input JokeUpdateWithoutCommentsDataInput {
  title: String
  text: String
  numberOfRatings: Int
  sumOfRatings: Int
  avgRating: Float
  author: UserUpdateOneRequiredWithoutJokesInput
  reviews: ReviewUpdateManyWithoutJokeInput
}

input JokeUpdateWithoutReviewsDataInput {
  title: String
  text: String
  numberOfRatings: Int
  sumOfRatings: Int
  avgRating: Float
  author: UserUpdateOneRequiredWithoutJokesInput
  comments: CommentUpdateManyWithoutJokeInput
}

input JokeUpdateWithWhereUniqueWithoutAuthorInput {
  where: JokeWhereUniqueInput!
  data: JokeUpdateWithoutAuthorDataInput!
}

input JokeUpsertWithoutCommentsInput {
  update: JokeUpdateWithoutCommentsDataInput!
  create: JokeCreateWithoutCommentsInput!
}

input JokeUpsertWithoutReviewsInput {
  update: JokeUpdateWithoutReviewsDataInput!
  create: JokeCreateWithoutReviewsInput!
}

input JokeUpsertWithWhereUniqueWithoutAuthorInput {
  where: JokeWhereUniqueInput!
  update: JokeUpdateWithoutAuthorDataInput!
  create: JokeCreateWithoutAuthorInput!
}

input JokeWhereInput {
  """Logical AND on all given filters."""
  AND: [JokeWhereInput!]

  """Logical OR on all given filters."""
  OR: [JokeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [JokeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  numberOfRatings: Int

  """All values that are not equal to given value."""
  numberOfRatings_not: Int

  """All values that are contained in given list."""
  numberOfRatings_in: [Int!]

  """All values that are not contained in given list."""
  numberOfRatings_not_in: [Int!]

  """All values less than the given value."""
  numberOfRatings_lt: Int

  """All values less than or equal the given value."""
  numberOfRatings_lte: Int

  """All values greater than the given value."""
  numberOfRatings_gt: Int

  """All values greater than or equal the given value."""
  numberOfRatings_gte: Int
  sumOfRatings: Int

  """All values that are not equal to given value."""
  sumOfRatings_not: Int

  """All values that are contained in given list."""
  sumOfRatings_in: [Int!]

  """All values that are not contained in given list."""
  sumOfRatings_not_in: [Int!]

  """All values less than the given value."""
  sumOfRatings_lt: Int

  """All values less than or equal the given value."""
  sumOfRatings_lte: Int

  """All values greater than the given value."""
  sumOfRatings_gt: Int

  """All values greater than or equal the given value."""
  sumOfRatings_gte: Int
  avgRating: Float

  """All values that are not equal to given value."""
  avgRating_not: Float

  """All values that are contained in given list."""
  avgRating_in: [Float!]

  """All values that are not contained in given list."""
  avgRating_not_in: [Float!]

  """All values less than the given value."""
  avgRating_lt: Float

  """All values less than or equal the given value."""
  avgRating_lte: Float

  """All values greater than the given value."""
  avgRating_gt: Float

  """All values greater than or equal the given value."""
  avgRating_gte: Float
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input JokeWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createJoke(data: JokeCreateInput!): Joke!
  createComment(data: CommentCreateInput!): Comment!
  createReview(data: ReviewCreateInput!): Review!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateJoke(data: JokeUpdateInput!, where: JokeWhereUniqueInput!): Joke
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  deleteUser(where: UserWhereUniqueInput!): User
  deleteJoke(where: JokeWhereUniqueInput!): Joke
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteReview(where: ReviewWhereUniqueInput!): Review
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertJoke(where: JokeWhereUniqueInput!, create: JokeCreateInput!, update: JokeUpdateInput!): Joke!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyJokes(data: JokeUpdateManyMutationInput!, where: JokeWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyJokes(where: JokeWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  jokes(where: JokeWhereInput, orderBy: JokeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Joke]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  user(where: UserWhereUniqueInput!): User
  joke(where: JokeWhereUniqueInput!): Joke
  comment(where: CommentWhereUniqueInput!): Comment
  review(where: ReviewWhereUniqueInput!): Review
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  jokesConnection(where: JokeWhereInput, orderBy: JokeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JokeConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Review implements Node {
  id: ID!
  author: User!
  joke: Joke!
  rate: Int!
  text: String!
}

"""A connection to a list of items."""
type ReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: ID
  rate: Int!
  text: String!
  author: UserCreateOneWithoutReviewsInput!
  joke: JokeCreateOneWithoutReviewsInput!
}

input ReviewCreateManyWithoutAuthorInput {
  create: [ReviewCreateWithoutAuthorInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutJokeInput {
  create: [ReviewCreateWithoutJokeInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutAuthorInput {
  id: ID
  rate: Int!
  text: String!
  joke: JokeCreateOneWithoutReviewsInput!
}

input ReviewCreateWithoutJokeInput {
  id: ID
  rate: Int!
  text: String!
  author: UserCreateOneWithoutReviewsInput!
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  rate_ASC
  rate_DESC
  text_ASC
  text_DESC
}

type ReviewPreviousValues {
  id: ID!
  rate: Int!
  text: String!
}

input ReviewScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rate: Int

  """All values that are not equal to given value."""
  rate_not: Int

  """All values that are contained in given list."""
  rate_in: [Int!]

  """All values that are not contained in given list."""
  rate_not_in: [Int!]

  """All values less than the given value."""
  rate_lt: Int

  """All values less than or equal the given value."""
  rate_lte: Int

  """All values greater than the given value."""
  rate_gt: Int

  """All values greater than or equal the given value."""
  rate_gte: Int
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateInput {
  rate: Int
  text: String
  author: UserUpdateOneRequiredWithoutReviewsInput
  joke: JokeUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateManyDataInput {
  rate: Int
  text: String
}

input ReviewUpdateManyMutationInput {
  rate: Int
  text: String
}

input ReviewUpdateManyWithoutAuthorInput {
  create: [ReviewCreateWithoutAuthorInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ReviewScalarWhereInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ReviewUpdateManyWithoutJokeInput {
  create: [ReviewCreateWithoutJokeInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutJokeInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ReviewScalarWhereInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutJokeInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutAuthorDataInput {
  rate: Int
  text: String
  joke: JokeUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithoutJokeDataInput {
  rate: Int
  text: String
  author: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutAuthorDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutJokeInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutJokeDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutAuthorDataInput!
  create: ReviewCreateWithoutAuthorInput!
}

input ReviewUpsertWithWhereUniqueWithoutJokeInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutJokeDataInput!
  create: ReviewCreateWithoutJokeInput!
}

input ReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rate: Int

  """All values that are not equal to given value."""
  rate_not: Int

  """All values that are contained in given list."""
  rate_in: [Int!]

  """All values that are not contained in given list."""
  rate_not_in: [Int!]

  """All values less than the given value."""
  rate_lt: Int

  """All values less than or equal the given value."""
  rate_lte: Int

  """All values greater than the given value."""
  rate_gt: Int

  """All values greater than or equal the given value."""
  rate_gte: Int
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  author: UserWhereInput
  joke: JokeWhereInput
}

input ReviewWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  joke(where: JokeSubscriptionWhereInput): JokeSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  username: String!
  role: UserRole
  age: Int
  jokes(where: JokeWhereInput, orderBy: JokeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Joke!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  username: String!
  role: UserRole
  age: Int
  jokes: JokeCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  reviews: ReviewCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutJokesInput {
  create: UserCreateWithoutJokesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  email: String!
  password: String!
  username: String!
  role: UserRole
  age: Int
  jokes: JokeCreateManyWithoutAuthorInput
  reviews: ReviewCreateManyWithoutAuthorInput
}

input UserCreateWithoutJokesInput {
  id: ID
  email: String!
  password: String!
  username: String!
  role: UserRole
  age: Int
  comments: CommentCreateManyWithoutAuthorInput
  reviews: ReviewCreateManyWithoutAuthorInput
}

input UserCreateWithoutReviewsInput {
  id: ID
  email: String!
  password: String!
  username: String!
  role: UserRole
  age: Int
  jokes: JokeCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  username_ASC
  username_DESC
  role_ASC
  role_DESC
  age_ASC
  age_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  username: String!
  role: UserRole
  age: Int
}

enum UserRole {
  JOKER
  REVIEWER
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  username: String
  role: UserRole
  age: Int
  jokes: JokeUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  reviews: ReviewUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  username: String
  role: UserRole
  age: Int
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutJokesInput {
  create: UserCreateWithoutJokesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutJokesDataInput
  upsert: UserUpsertWithoutJokesInput
}

input UserUpdateOneRequiredWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateWithoutCommentsDataInput {
  email: String
  password: String
  username: String
  role: UserRole
  age: Int
  jokes: JokeUpdateManyWithoutAuthorInput
  reviews: ReviewUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutJokesDataInput {
  email: String
  password: String
  username: String
  role: UserRole
  age: Int
  comments: CommentUpdateManyWithoutAuthorInput
  reviews: ReviewUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutReviewsDataInput {
  email: String
  password: String
  username: String
  role: UserRole
  age: Int
  jokes: JokeUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutJokesInput {
  update: UserUpdateWithoutJokesDataInput!
  create: UserCreateWithoutJokesInput!
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  role: UserRole

  """All values that are not equal to given value."""
  role_not: UserRole

  """All values that are contained in given list."""
  role_in: [UserRole!]

  """All values that are not contained in given list."""
  role_not_in: [UserRole!]
  age: Int

  """All values that are not equal to given value."""
  age_not: Int

  """All values that are contained in given list."""
  age_in: [Int!]

  """All values that are not contained in given list."""
  age_not_in: [Int!]

  """All values less than the given value."""
  age_lt: Int

  """All values less than or equal the given value."""
  age_lte: Int

  """All values greater than the given value."""
  age_gt: Int

  """All values greater than or equal the given value."""
  age_gte: Int
  jokes_every: JokeWhereInput
  jokes_some: JokeWhereInput
  jokes_none: JokeWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
