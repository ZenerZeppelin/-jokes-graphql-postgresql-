type Query {
  users:[User!]!
  jokes(query:String, minRate: Float): [Joke!]!
  comments(jokeId:ID, authorId:ID): [Comment!]!
  reviews(jokeId:ID, authorId:ID):[Review!]!
}

type Mutation {
  signUp(data:SignUpInput!):User!
  writeJoke(data:WriteJokeInput):Joke!
  deleteJoke(jokeId:ID!):Joke!
  updateJoke(data:updateJokeInput!, jokeId:ID!):Joke!
  writeComment(data:WriteCommentInput!):Comment!
  deleteComment(commentId:ID!):Comment!
  updateComment(data:UpdateCommentInput, commentId:ID!):Comment!
}

type Subscription {

  jokes(authorId:ID!):JokeSubscriptionPayload!
  comments(authorId: ID, jokeId:ID): CommentSubscriptionPayload!
}

type User {
  id: ID!
  email: String!
  password: String!
  username: String!
  role: UserRole!
  age: Int
  jokes:[Joke!]!
  comments: [Comment!]!
  reviews: [Review!]!
}

type Joke {
  id: ID!
  author: User!
  title: String!
  text: String!
  numberOfRatings: Int!
  sumOfRatings: Int!
  avgRating: Float!
  comments: [Comment!]!
  reviews: [Review!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  joke: Joke!
}

type Review {
  id: ID!
  author: User!
  joke: Joke!
  rate: Int!
  text: String!
}

input SignUpInput {
  email: String!
  password: String!
  username: String!
  role: UserRole!
  age: Int
}

input WriteJokeInput {
  authorId:ID!
  title: String!
  text: String!
}

input updateJokeInput {
  title: String
  text:String
}

input WriteCommentInput {
  text: String!
  authorId: ID!
  jokeId: ID!
}

input UpdateCommentInput {
  text: String!
}

type JokeSubscriptionPayload {
  mutation: MutationType!
  node: Joke
}

type CommentSubscriptionPayload {
  mutation:MutationType!
  node:Comment
}

enum UserRole {
  JOKER
  REVIEWER
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}